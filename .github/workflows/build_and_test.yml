name: Build and Test

on: push

env:
  RT_URL: github.com/bigladder/kiva-test-results.git
  RT_DIR: build/test/results
  PATOKEN: ${{ secrets.CI_PA_TOKEN }}
jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            os_ver: "22.04"
            config: Release
            coverage: false
            cc: gcc-11
            cxx: g++-11
          - os: ubuntu
            os_ver: "20.04"
            config: Release
            coverage: false
            cc: gcc-10
            cxx: g++-10
          - os: windows
            os_ver: "2022"
            config: Release
            coverage: false
            cc: cl
            cxx: cl
          - os: macos
            os_ver: "12"
            config: Release
            coverage: false
            cc: clang
            cxx: clang++
          - os: macos
            os_ver: "11"
            config: Release
            coverage: false
            cc: clang
            cxx: clang++
          - os: ubuntu
            os_ver: "20.04"
            config: Debug
            coverage: true
            cc: gcc-10
            cxx: g++-10
    defaults:
      run:
        shell: bash
    name: ${{ matrix.os }}-${{ matrix.os_ver }} ${{ matrix.cxx }} ${{ matrix.config }} coverage=${{ matrix.coverage }}
    env: 
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    runs-on: ${{ matrix.os }}-${{ matrix.os_ver }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build Kiva
        uses: ./.github/actions/build-kiva
        with:
          configuration: ${{ matrix.config }}
          coverage: ${{ matrix.coverage }}
      - name: Setup tooling
        if: !matrix.coverage
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.0
      - name: Post-configure
        if: !matrix.coverage
        run: |
          gem install git
          git config --global core.autocrlf input
          ruby ../scripts/clone-and-mimic.rb
        working-directory: build
      - name: Run basic tests
        run: ctest -C ${{matrix.config}} --output-on-failure
        working-directory: build
      - name: Log results for no-coverage
        if: matrix.coverage == 'OFF'
        run: ruby ../scripts/log-results.rb
        working-directory: build
      - name: Unit test
        if: matrix.coverage == 'ON'
        run: ctest -R unit\.
        working-directory: build
      - name: Integration test
        if: matrix.coverage == 'ON'
        run: ctest -R integration\.
        working-directory: build
      - name: Code Coverage Analysis
        if: matrix.coverage == 'ON'
        run: make gcov
        working-directory: build
      - name: Upload Code Coverage Report (Unit)
        if: matrix.coverage == 'ON'
        uses: codecov/codecov-action@v2
        with:
          flags: unit
      - name: Upload Code Coverage Report (Integration)
        if: matrix.coverage == 'ON'
        uses: codecov/codecov-action@v2
        with:
          flags: integration

